grammar Ziffers

  rule line
    (s / comment / escaped_opts / continue / bar / multisleep / arpeggio / chords / pitch_classes / fixed_octave / numeric_octave / call / eval / rest / control / multiuse / use / slide / jumper / reset / skip)*
    {
      def value
        e = elements.collect {|v| v.value }.flatten.compact
      end
    }
  end

  rule fixed_octave
    o:([\^\_]+) (s / sleep)
    {
    def value
      Thread.current[:topts][:octave] = 0 if !Thread.current[:topts][:octave]
      Thread.current[:topts][:octave] += o.text_value.split('').inject(0){|sum,x| sum + (x=='^' ? 1 : -1)}
      nil
    end
    }
  end

  rule numeric_octave
    '<' o:(integer) '>' (s / sleep)
    {
      def value
        Thread.current[:topts][:octave] = o.value
        nil
      end
    }
  end

  rule multisleep
    sleep s
    {
    def value
      Thread.current[:topts][:sleep] = sleep.value
      nil
    end
    }
  end

  rule sleep
    s:(zchar / decimal) negation:('-')? d:('.')*
    {
    def value
        sum = s.value
        sum = sum * (2.0-(1.0/(2*d.text_value.length))) if !d.text_value.empty?
        sum = s.value-(sum-s.value) if !negation.text_value.empty?
        sum
     end
    }
  end

  rule zchar
  s:([mklpdcwyhnqaefsxtgujz]+)
  {
    def value
      sum = s.text_value.split('').inject(0){|sum,x| sum + Thread.current[:default_durs][x.to_sym]}
      sum.to_f
   end
  }
  end

  rule arpeggio
    '@(' a:(sleep / s / chords / pitch_classes)* ')'
    {
     def value
      #chord_list = n.elements.collect {|v| v.value }.filter_map {|v| v if v}

      arp = a.elements.collect {|v| v.value }.filter_map do |v|
        if v then
          if v.is_a?(Float)
              Thread.current[:topts][:sleep] = v
              nil
          else
            v.merge!(Thread.current[:topts]) if v.is_a?(Hash)
            v
          end
        end
      end
      Thread.current[:tarp] = arp.length>0 ? arp : nil
      nil
     end
    }
  end

  rule chords
     pitch_classes 2..
    {
     def value
      e = elements.collect {|v| v.value }
      pitch_class_list = []
      note_list = []
      octave_list = []
      e.each do |d|
        pitch_class_list.push(d[:pc])
        note_list.push(d[:note])
        octave_list.push(d[:octave])
      end
      v = {:notes=>note_list, :pcs=>pitch_class_list, :hpcs=>e, :octaves=>octave_list}
      v.merge!(Thread.current[:topts])
      v[:amp] = e[0][:amp] if e[0][:amp]
      v[:sleep] = Thread.current[:tchordsleep] if Thread.current[:tchordsleep]
      v[:arpeggio] = Thread.current[:tarp] if Thread.current[:tarp]
      v = ZiffHash[v]
      if !Thread.current[:tshared][:normalized]
        v = apply_transformation v, Thread.current[:tshared], 0, Thread.current[:counter]
        Thread.current[:counter] = Thread.current[:counter]+1
      end
      v
     end
    }
  end

  rule call
    prefix:(prefix_sleep)* method_call
    {
      def value
        v = {method: method_call.value }.merge!(Thread.current[:topts])
        prefixes = prefix.elements.map {|v| v.value}.inject{|a,b| a.merge(b){|_,x,y| x + y}}

        if prefixes
          v[:sleep] = prefixes[:sleep] if prefixes[:sleep]
        end

        ZiffHash[v]
      end
    }
  end

  rule method_call
    ':' [a-zA-Z]+ [a-zA-Z0-9_]* ('(' [a-zA-Z0-9\,\s\.]* ')')?
    {
      def value
        val.text_value
      end
    }
  end

  rule comment
    '<!' [a-zA-Z0-9_\-\s\n\r\|#+\-*]+ '>'
    {
      def value
        nil
      end
    }
  end

  rule escaped_opts
    '{' s? opts:(key:([a-zA-Z0-9]+) ':' s? val:([a-zA-Z0-9:-]+) ','? s?)+ '}'
    {
    def value
      h = Hash[*opts.elements.map {|p| [p.key.text_value.to_sym,p.val.text_value.to_i] }.flatten]
      Thread.current[:topts] = Thread.current[:topts].merge(h)
      nil
    end
    }
  end

  rule parameter_list
    '<' first:(parameter) rest:(',' i:parameter)* '>'
    {
    def value
      if rest.empty?
        first.value
      else
        r = rest.elements.map {|v| v.i.value }
        r = [first.value]+r
      end
    end
    }
  end

  rule parameter
    p:(decimal / integer)
    {
      def value
        p.value
      end
    }
  end

  rule normal_pitch_class
    d:('-'? [0-9TE])
    {
      def value
        parse_str_dgr(d.text_value)
      end
    }
  end

  rule pitch_classes
    prefix:(escaped_prefix_sleep / prefix_sleep / octave / escaped_octave / add / dynamics / staccato)* some_pitch_class:(normal_pitch_class / eval)
    {
      def value
        dgr = some_pitch_class.value
        prefixes = prefix.elements.map {|v| v.value}.inject{|a,b| a.merge(b){|_,x,y| x + y}}
        prefixes = {} if !prefixes

        # TODO: Create new parser for midi and cc
        if (Thread.current[:topts][:midi] || Thread.current[:topts][:cc])
          v = {note: dgr, pc: note_pc(dgr), octave: note_oct(dgr), scale: :chromatic }
        else
          if prefixes[:fixed_octave]
            oct = prefixes[:fixed_octave]
          else
            oct = prefixes[:octave] ? prefixes[:octave] : 0
            oct = oct + Thread.current[:topts][:octave] if Thread.current[:topts][:octave]
          end
          addition = prefixes[:add] ? prefixes[:add] : 0
          v = get_ziff dgr, Thread.current[:topts][:key], Thread.current[:topts][:scale], oct, addition
        end

        v.merge!(Thread.current[:topts]) { |key, important, default| important }
        v[:amp] = v[:amp] ? v[:amp]+(v[:amp]/2)*prefixes[:dynamics] : (prefixes[:dynamics]<0 ? 1.0/-(prefixes[:dynamics]-1) : 1.0+0.5*prefixes[:dynamics])  if prefixes[:dynamics]

        v[:release] = v[:release]/(prefixes[:staccato]+1) if prefixes[:staccato]

        v[:sleep] = prefixes[:sleep] if prefixes[:sleep]

        v = ZiffHash[v]
        if !Thread.current[:tshared][:normalized] # If directly from zparse
          v = apply_transformation v, Thread.current[:tshared], 0, Thread.current[:counter]+(Thread.current[:tshared][:loop_i] ? Thread.current[:tshared][:loop_i] : 0)
          Thread.current[:counter] = Thread.current[:counter]+1
        end
        v
     end
    }
  end

  rule prefix_sleep
    s:([mklpdcwyhnqaefsxtgujz]) d:('.')*
    {
    def value
        sum = Thread.current[:default_durs][s.text_value.to_sym]
        sum = sum * (2.0-(1.0/(2*d.text_value.length))) if !d.text_value.empty?
        {sleep: sum}
     end
    }
  end

  rule escaped_prefix_sleep
  '[' decimal ']'
  {
    def value
      {sleep: decimal.value}
    end
   }
  end

  rule octave
    ('^' / '_')
    {
      def value
        {octave: (text_value=='^' ? 1 : -1) }
     end
    }
  end

  rule escaped_octave
    '<' o:(integer) '>'
    {
      def value
        {fixed_octave: o.value}
      end
    }
  end

  rule add
    ('#' / 'b')
    {
      def value
        {add: text_value=='#' ? 1 : -1}
      end
    }
  end

  rule dynamics
    ('`' / '´')
    {
      def value
        {dynamics: text_value=='´' ? 1 : -1}
      end
    }
  end

  rule staccato
    '\''
    {
      def value
        {staccato: 1}
      end
    }
  end

  rule multiuse
    use 2..
      {
      def value
        samples = elements.collect {|v| v.value }.compact
        raise "No samples or lambas defined for A-Z" if samples.length==0
        chars = samples.map {|s| s[:char]}
        samples_hash = {samples: samples, chars: chars, sleep: samples[0][:sleep]}
        ZiffHash[samples_hash]
      end
    }
  end

  rule use
    prefix:(prefix_sleep / escaped_prefix_sleep / octave / add / dynamics / staccato)* u:[ABCDFGHIJKLMNOPQRSUWXYZO]
    {
    def value
      use_list = Thread.current[:tshared][:use] if Thread.current[:tshared] and Thread.current[:tshared].has_key?(:use)

        if use_list
          prefixes = prefix.elements.map {|v| v.value}.inject{|a,b| a.merge(b){|_,x,y| x + y}}
          prefixes = {} if !prefixes

          Thread.current[:topts][:run_each] = use_list.delete(:run) if use_list[:run]
          v = use_list.has_key?(u.text_value.to_sym) ? use_list[u.text_value.to_sym].dup : nil

          return nil if !v

          if v.is_a?(Hash)
            Thread.current[:topts][:run_each] = v.delete(:run) if v[:run] and !v[:sample] and !v[:note]
            v = apply_transformation(v, v[:apply] ? v[:apply] : {apply: v.except(:sample)})
          elsif v.is_a?(Symbol)
            v = {sample: v}
          elsif v.is_a?(Proc)
            v = {method: v}
          end

          v.merge!(Thread.current[:topts]) { |key, important, default| important }

          v[:sleep] = prefixes[:sleep] if prefixes[:sleep]
          v[:sleep] = 0.0 if v.has_key?(:cue)

          v[:amp] = v[:amp] ? v[:amp]+(v[:amp]/2)*prefixes[:dynamics] : (prefixes[:dynamics]<0 ? 1.0/-(prefixes[:dynamics]-1) : 1.0+0.5*prefixes[:dynamics])  if prefixes[:dynamics]

          if prefixes[:octave]
            v[:pitch] = 0.0 if !v[:pitch]
            v[:pitch] += prefixes[:octave]*12 if prefixes[:octave]
          else
            v[:pitch] = v[:pitch] ? v[:pitch]+Thread.current[:topts][:octave] : Thread.current[:topts][:octave] if Thread.current[:topts][:octave]
          end

          v[:pitch] = v[:pitch] ? v[:pitch]+Thread.current[:topts][:add] : Thread.current[:topts][:add] if prefixes[:add]

          v[:pitch_stretch] = 1.0/prefixes[:staccato] if prefixes[:staccato]

          v[:char] = u.text_value

          !(v[:sample] or v[:note] or v[:cue]) ? v : ZiffHash[v]
        else
          nil
        end
    end
    }
  end

  rule eval
    '{' e:((decimal / integer / '**' / '*' / '+' / '-' / '/' / '^' / '%' / '|' / '&' / '<<' / '>>' / '!' / '~')*) '}'
    {
      def value
        eval(e.text_value)
      end
    }
  end

  rule jumper
  ('[DC]' / '[DCF]' / '[F]' / '[S]' / '[DS]' / '[DSF]')
  {
    def value
      # TODO: Not implemented
      {
        :jumper=>text_value
      }
    end
  }
  end

  rule rest
  s:(sleep)? 'r'
  {
    def value
      v = {note: :r}
      v[:sleep] = s.methods.include?(:value) ? s.value : Thread.current[:topts][:sleep]
      ZiffHash[v]
   end
  }
  end

  rule reset
    '!'
    {
    def value
      Thread.current[:topts] = Marshal.load(Marshal.dump(Thread.current[:topts_orig]))
      nil
    end
    }
  end

  rule control
   d:([ABCDFGHIJKLMNOPQRSUWXYZ]) c:(integer / escaped_decimal / escaped_text)
   {
     def value
     control_chars = {
       'A': :amp,
       'C': :attack,
       'P': :pan,
       'D': :decay,
       'S': :sustain,
       'R': :release,
       'Z': :sleep,
       'X': :chord_sleep,
       'I': :pitch,
       'K': :key,
       'L': :scale,
       'O': :channel
     }
      control_type = control_chars[d.text_value.to_sym]
      Thread.current[:topts][control_type] = c.value if c.methods.include?(:value)
      nil
     end
    }
end

  rule decimal
    '-'? [0-9]+ '.' [0-9]+
    {
      def value
       text_value.to_f
      end
     }
  end

  rule slide
  '~' e:( '<' v:([0-9]+ '.' [0-9]+) '>')? s? c:(chords)
    {
      def value
        v = {
          :slide=>ZiffHash[c.value.merge!(Thread.current[:topts])]
        }
        v.merge!(Thread.current[:topts])
        v[:note_slide] = e.v.text_value.to_f if !e.empty?
        ZiffHash[v]
      end
    }
  end

  rule escaped_decimal
  '<' decimal '>'
  {
    def value
      decimal.value
    end
   }
  end

  rule escaped_text
   '<' e:([\sa-zA-Z0-9:-]*) '>'
   {
     def value
      e.text_value
     end
    }
  end

  rule continue
    '...'
    {
    def value
     nil
    end }
  end

  rule integer
     '-'? [0-9]+ {
     def value
      text_value.to_i
     end }
  end

  rule s
     [\s\r\n]+
     {
     def value
      nil
    end
    }
  end

  rule skip
    '# '
    {
    def value
      Thread.current[:topts][:skip] = Thread.current[:topts][:skip] ? false : true
      nil
    end
  }
  end

  rule bar
     '|' {
       def value
          Thread.current[:topts].except!(:skip)
          Thread.current[:topts][:octave] = 0
          Thread.current[:topts][:sleep] = Thread.current[:topts_orig][:sleep] ? Thread.current[:topts_orig][:sleep] : 1.0
          Thread.current[:topts][:measure]  = !Thread.current[:topts][:measure] ? 0 : Thread.current[:topts][:measure] += 1
          nil
        end
      }
  end
end
