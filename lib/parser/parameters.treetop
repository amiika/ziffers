grammar Parameters

  rule base
    space? opts:(hash_elements / parameter) space?
    {
      def value
        h = opts.value
        h
      end
    }
  end

  rule parameter
    '$' p:(string)
  {
    def value
      Thread.current[:ziffers_param_opts][p.value.to_sym]
    end
  }
  end

  rule symbol
    ':' s:(string)
    {
    def value
      s.text_value.to_sym
    end
    }
  end

  rule boolean
    t:('true' / 'false')
    {
    def value
      t.text_value == 'true'
    end
    }
  end

  rule string
    [a-zA-Z_]+ [0-9]*
    {
    def value
      text_value
    end
    }
  end

  rule integer
    [-0-9]+
    {
    def value
      text_value.to_i
    end
    }
  end

  rule random_integer
  '(' m:(integer) ',' x:(integer) ')'
    {
      def value
        ->(){sonic_random(m.value,x.value)}
      end
    }
  end

  rule decimal
    [0-9]+ '.' [0-9]+
    {
      def value
       text_value.to_f
      end
     }
  end

  rule random_decimal
    '(' m:(decimal) ',' x:(decimal) ')'
      {
        def value
          ->(){sonic_random_float(m.value,x.value)}
        end
      }
  end

  rule range
    s:(integer) '..' e:(integer)
    {
    def value
      s.value..e.value
    end
    }
  end

  rule integer_range
   '(' a:(integer) '..' b:(integer) ')' type:('+' / '*')? step:(integer)? reflect:('%')?
   {
   def value
     sonic_range(a.value, b.value, step.methods.include?(:value) ? step.value : 1, type.text_value, reflect.text_value=="%" ? true : false)
   end
   }
  end

  rule decimal_range
  '(' a:(decimal) '..' b:(decimal) ')' type:('+' / '*')? step:(decimal)? reflect:('%')?
   {
   def value
     sonic_range(a.value,b.value, step.methods.include?(:value) ? step.value : 0.1, type.text_value, reflect.text_value=="%" ? true : false)
   end
   }
  end

  rule array
  '[' space? items:((decimal / random_decimal / symbol / integer / random_integer / boolean / hash / array) ','? space?)+ ']'
  {
    def value
     items.elements.map {|v| v.value }
    end
   }
  end

  rule hash
    '{' hash_elements '}'
    {
      def value
        hash_elements.value
      end
    }
  end

  rule hash_elements
    space? items:(key:(string) ':' space? val:(symbol / parameter / decimal / random_decimal / range / integer_range / decimal_range / symbol / integer / random_integer / string / boolean / hash / array) ','? space?)+
    {
      def value
           Hash[*items.elements.map {|p| [p.key.value.to_sym, p.val.value] }.flatten(1)]
      end
     }
  end

  rule space
      [\s\r\n]+
      {
        def value
          text_value
        end
      }
  end

end
